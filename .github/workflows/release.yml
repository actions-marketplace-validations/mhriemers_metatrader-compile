name: Perform a Release

on:
  workflow_dispatch:
    inputs:
      npm-version-arg:
        description: Argument to npm-version
        default: minor
        required: true

jobs:
  build-and-release:
    name: Build and release
    runs-on: ubuntu-latest
    steps:
      # Configure runner with the right stuff
      - uses: actions/checkout@v3
      - name: Configure git
        run: |
          git config user.name 'Release Action'
          git config user.email '<>'
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # Call `npm version`. It increments the version and commits the changes.
      # We'll save the output (new version string) for use in the following
      # steps
      - name: Update package version
        id: update-package-version
        run: |
          VERSION=$(npm version "${{ github.event.inputs.npm-version-arg }}")
          echo "::set-output name=version::$VERSION"

      # Update the branch with the new commit
      - name: Push new version
        run: git push

      # Now carry on, business as usual
      - name: Perform npm tasks
        run: npm run ci

      # Create a detached commit containing the built artifacts and tag it with
      # the release. Note: the fact that the branch is locally updated will not 
      # be relayed (pushed) to origin
      - name: Commit to release branch
        id: release_info
        run: |
          # Retrieve the previously created tag
          TAG="${{ steps.update-package-version.outputs.version }}"

          # Add the built artifacts. Using --force because dist/lib should be in
          # .gitignore
          git add --force dist lib

          # Make the commit
          MESSAGE="Build for $(git rev-parse --short HEAD)"
          git commit --allow-empty -m "$MESSAGE"

          # Create an annotated tag and push it to origin. Using -f to overwrite
          # the tag that `npm version` made for us in a previous step
          git tag -f -a -m "Release $TAG" $TAG
          git push origin $TAG
      
      # Finally, create the release using the tag created above
      - name: Create the Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.update-package-version.outputs.version }}
          tag_name: ${{ steps.update-package-version.outputs.version }}
          draft: true
          prerelease: false